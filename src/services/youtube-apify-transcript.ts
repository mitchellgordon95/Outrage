/**
 * YouTube transcript extractor using Apify
 * More reliable alternative to the youtube-transcript npm package
 */

import { ApifyClient } from 'apify-client';

interface ApifyVideoResult {
  title: string;
  type: string;
  id: string;
  url: string;
  viewCount: number;
  date: string;
  channelName: string;
  channelUrl: string;
  channelId: string;
  duration: string;
  text: string;
  subtitles?: Array<{
    srtUrl: string | null;
    type: string;
    language: string;
    srt: string;
  }>;
}

export interface TranscriptResult {
  success: boolean;
  transcript?: string;
  error?: string;
  videoId?: string;
  videoTitle?: string;
  channelName?: string;
  channelId?: string;
}

/**
 * Extract video ID from various YouTube URL formats
 */
export function extractVideoId(url: string): string | null {
  // Handle various YouTube URL formats
  const patterns = [
    /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/|youtube\.com\/v\/)([^&\n?#]+)/,
    /^([a-zA-Z0-9_-]{11})$/ // Direct video ID
  ];
  
  for (const pattern of patterns) {
    const match = url.match(pattern);
    if (match) {
      return match[1];
    }
  }
  
  return null;
}

/**
 * Get YouTube transcript using Apify
 */
export async function getYouTubeTranscriptApify(videoIdOrUrl: string): Promise<TranscriptResult> {
  try {
    const apifyToken = process.env.APIFY_TOKEN;
    
    if (!apifyToken) {
      return {
        success: false,
        error: 'Apify token not configured'
      };
    }
    
    // Extract video ID if URL was provided
    const videoId = extractVideoId(videoIdOrUrl) || videoIdOrUrl;
    
    // Initialize Apify client
    const client = new ApifyClient({
      token: apifyToken
    });
    
    // Prepare input for single video
    const input = {
      startUrls: [{
        url: `https://www.youtube.com/watch?v=${videoId}`,
        method: 'GET'
      }],
      downloadSubtitles: true,
      subtitlesLanguage: 'en',
      preferAutoGeneratedSubtitles: false,
      subtitlesFormat: 'srt',
      maxResults: 1,
      maxResultsShorts: 0,
      maxResultStreams: 0
    };
    
    console.log(`Fetching transcript for video ${videoId} using Apify...`);
    
    // Run the Apify actor
    const run = await client.actor('streamers/youtube-scraper').call(input);
    
    // Fetch results
    const { items } = await client.dataset(run.defaultDatasetId).listItems();
    
    if (!items || items.length === 0) {
      return {
        success: false,
        error: 'No results returned from Apify',
        videoId
      };
    }
    
    const video = items[0] as ApifyVideoResult;
    
    // Check if subtitles are available
    if (!video.subtitles || video.subtitles.length === 0) {
      return {
        success: false,
        error: 'No subtitles available for this video',
        videoId: video.id,
        videoTitle: video.title,
        channelName: video.channelName,
        channelId: video.channelId
      };
    }
    
    // Get the first available subtitle (preferably English)
    const subtitle = video.subtitles.find(s => s.language === 'en') || video.subtitles[0];
    
    if (!subtitle.srt) {
      return {
        success: false,
        error: 'Subtitle content is empty',
        videoId: video.id,
        videoTitle: video.title,
        channelName: video.channelName,
        channelId: video.channelId
      };
    }
    
    // Convert SRT to plain text transcript
    const transcript = subtitle.srt
      .split('\n')
      .filter(line => !line.match(/^\d+$/) && !line.includes('-->') && line.trim())
      .join(' ')
      .replace(/\s+/g, ' ')
      .trim();
    
    console.log(`Successfully fetched transcript for video ${video.id} (${transcript.length} chars)`);
    
    return {
      success: true,
      transcript,
      videoId: video.id,
      videoTitle: video.title,
      channelName: video.channelName,
      channelId: video.channelId
    };
    
  } catch (error: any) {
    console.error('Apify transcript extraction failed:', error);
    
    return {
      success: false,
      error: error.message || 'Unknown error',
      videoId: videoIdOrUrl
    };
  }
}

/**
 * Get transcripts for videos from a YouTube channel
 */
export async function getChannelVideosWithTranscripts(
  channelUrl: string, 
  maxVideos: number = 10
): Promise<ApifyVideoResult[]> {
  try {
    const apifyToken = process.env.APIFY_TOKEN;
    
    if (!apifyToken) {
      throw new Error('Apify token not configured');
    }
    
    // Initialize Apify client
    const client = new ApifyClient({
      token: apifyToken
    });
    
    // Prepare input for channel videos
    const input = {
      startUrls: [{
        url: channelUrl,
        method: 'GET'
      }],
      downloadSubtitles: true,
      subtitlesLanguage: 'en',
      preferAutoGeneratedSubtitles: true,
      subtitlesFormat: 'srt',
      maxResults: maxVideos,
      maxResultsShorts: 0,
      maxResultStreams: 0,
      sortVideosBy: 'NEWEST' as const
    };
    
    console.log(`Fetching ${maxVideos} recent videos from channel ${channelUrl}...`);
    console.log('Apify input:', JSON.stringify(input, null, 2));
    
    // Run the Apify actor
    const run = await client.actor('streamers/youtube-scraper').call(input);
    
    // Fetch results
    const { items } = await client.dataset(run.defaultDatasetId).listItems();
    
    console.log(`Fetched ${items.length} videos from channel`);
    
    return items as ApifyVideoResult[];
    
  } catch (error: any) {
    console.error('Failed to fetch channel videos:', error);
    throw error;
  }
}